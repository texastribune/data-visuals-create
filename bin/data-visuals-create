#!/usr/bin/env node

// packages
const { prompt } = require('enquirer');
const mri = require('mri');
const checkForUpdate = require('update-check');

// internal
const pkg = require('../package.json');
const { createProject } = require('../lib');
const { alert, highlight, warn } = require('../lib/colors');

// 1000 milliseconds * 60 seconds * 60 minutes * 6 hours
const sixHours = 1000 * 60 * 60 * 6;

const mriConfig = {
  alias: {
    h: 'help',
    v: 'version',
  },
  boolean: ['help', 'version'],
  unknown(flag) {
    console.log(`The option "${flag}" is unknown.`);
    process.exit(1);
  },
};

const sendHelp = () =>
  console.log(
    `\nUsage: ${highlight('data-visuals-create')} [project-type] [project-name]`
  );

async function main(argv_) {
  const flags = mri(argv_.slice(2), mriConfig);

  if (flags.help) {
    sendHelp();
    process.exit();
  }

  if (flags.version) {
    console.log(pkg.version);
    process.exit();
  }

  const { isTTY } = process.stdout;

  let update = null;

  try {
    update = await checkForUpdate(pkg, {
      interval: sixHours,
      distTag: 'latest',
    });
  } catch (err) {
    console.error(warn('Checking for updates failed.'));
  }

  if (update && isTTY) {
    console.log(
      `\n${alert(
        'UPDATE AVAILABLE'
      )} The latest version of @data-visuals/create is ${highlight(
        update.latest
      )}`
    );
    console.log(`> npm install -g @data-visuals/create@${update.latest}`);
    console.log();

    const { stopHere } = await prompt({
      type: 'confirm',
      name: 'stopHere',
      message: `Would you like to update ${highlight(
        'data-visuals-create'
      )} before creating your project?\n  This ensures you have all the latest features and bug fixes.`,
      initial: false,
    });

    if (stopHere) {
      console.log(
        `\nGood call! Run the update command above, then run ${highlight(
          'data-visuals-create'
        )} again.`
      );
      process.exit();
    } else {
      console.log();
    }
  }

  const args = flags._;
  const numArgs = args.length;

  if (numArgs < 2) {
    console.log(warn(`Not enough arguments were passed. (${numArgs})`));
    sendHelp();
    process.exit(1);
  }

  if (numArgs > 2) {
    console.log(warn(`Too many arguments were passed. (${numArgs})`));
    sendHelp();
    process.exit(1);
  }

  const [projectType, projectName] = args;

  await createProject(projectType, projectName);
}

main(process.argv).catch(console.error);
